<?php

namespace App\Http\Controllers;

use App\Models\Group;
use App\Models\PermissionGroup;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RoleController extends Controller
{
    public function index(Request $request)
    {
        // Ambil permission_id yang cocok dengan pencarian
        $permissions = Permission::when($request->search, function ($q) use ($request) {
            $q->where('name', 'like', '%' . $request->search . '%');
        })->get();

        // Ambil hanya id grup dari permission tersebut
        $groupIds = $permissions->pluck('permission_group_id')->unique()->filter();

        // Ambil semua permission group berdasarkan group_id
        $groups = PermissionGroup::whereIn('id', $groupIds)
            ->with(['permissions', 'roles']) // relasi 'roles' di sini harus ada di model PermissionGroup
            ->orderBy('name')
            ->paginate(10)
            ->withQueryString();

        return inertia('roles/index', [
            'groups' => $groups,
            'filters' => $request->only(['search']),
        ]);
    }

    public function create()
    {
        $permissions = Permission::pluck('name');
        $roles = Role::all();

        $groupedPermissions = [];
        foreach ($permissions as $perm) {
            $parts = explode('-', $perm, 2);
            $groupKey = isset($parts[1]) ? ucfirst($parts[0]) : 'Other';
            $groupedPermissions[$groupKey][] = $perm;
        }

        return inertia('roles/create', [
            'available_permissions' => $groupedPermissions,
            'available_roles' => $roles,
        ]);
    }

    public function edit($id)
    {
        $group = PermissionGroup::with('permissions')->findOrFail($id);
        $roles = Role::all();

        $allPermissions = Permission::pluck('name');
        $groupedPermissions = [];

        foreach ($allPermissions as $perm) {
            $parts = explode('-', $perm, 2);
            $groupKey = isset($parts[1]) ? ucfirst($parts[0]) : 'Other';
            $groupedPermissions[$groupKey][] = $perm;
        }

        // Ambil roles yang terhubung ke group (melalui model Group)
        $attachedRoles = $group->group?->roles()->pluck('id') ?? [];

        return inertia('roles/edit', [
            'group' => $group,
            'group_permissions' => $group->permissions,
            'available_permissions' => $groupedPermissions,
            'available_roles' => $roles,
            'attached_roles' => $attachedRoles,
        ]);
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'group_name' => 'required|min:3|max:255|unique:permission_groups,name',
            'permissions' => 'required|array|min:1',
            'permissions.*' => 'exists:permissions,name',
            'roles' => 'required|array|min:1',
            'roles.*' => 'exists:roles,id',
        ]);

        DB::transaction(function () use ($validated) {
            // 1. Buat Group utama
            $group = Group::create(['name' => $validated['group_name']]);

            // 2. Assign Role ke Group (pivot)
            $group->roles()->sync($validated['roles']);

            // 3. Buat PermissionGroup untuk setiap permission dan hubungkan ke Group
            $permissionGroup = PermissionGroup::create([
                'group_id' => $group->id,
                'name' => $validated['group_name'],
            ]);

            // 4. Assign permission ke PermissionGroup
            foreach ($validated['permissions'] as $permName) {
                $permission = Permission::where('name', $permName)->first();
                $permission->update(['permission_group_id' => $permissionGroup->id]);
            }
        });

        return redirect()->route('roles.index')->with('success', 'Permission group created.');
    }

    public function update(Request $request, $id)
    {
        $group = PermissionGroup::with('permissions')->findOrFail($id);
        $mainGroup = $group->group;

        $validated = $request->validate([
            'group_name' => 'required|min:3|max:255|unique:permission_groups,name,' . $group->id,
            'permissions' => 'nullable|array',
            'permissions.*' => 'exists:permissions,name',
            'roles' => 'required|array|min:1',
            'roles.*' => 'exists:roles,id',
        ]);

        DB::transaction(function () use ($validated, $group, $mainGroup) {
            $group->update(['name' => $validated['group_name']]);

            if ($mainGroup) {
                $mainGroup->update(['name' => $validated['group_name']]);
                $mainGroup->roles()->sync($validated['roles']);
            }

            $permissionIds = Permission::whereIn('name', $validated['permissions'] ?? [])->pluck('id');

            Permission::whereIn('id', $permissionIds)->update([
                'permission_group_id' => $group->id,
            ]);

            Permission::where('permission_group_id', $group->id)
                ->whereNotIn('id', $permissionIds)
                ->update(['permission_group_id' => null]);
        });

        return redirect()->route('roles.index')->with('success', 'Permission group updated.');
    }

    public function destroy($id)
    {
        DB::transaction(function () use ($id) {
            $group = PermissionGroup::with('permissions')->findOrFail($id);

            foreach ($group->permissions as $permission) {
                DB::table('role_has_permissions')->where('permission_id', $permission->id)->delete();
                $permission->delete();
            }

            if ($group->group) {
                $group->group->roles()->detach();
                $group->group->delete();
            }

            $group->delete();
        });

        return back()->with('success', 'Permission group and related permissions deleted successfully.');
    }
}
